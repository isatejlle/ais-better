{"ast":null,"code":"document.getElementById('predictButton').addEventListener('click', async () => {\n  const imageInput = document.getElementById('imageInput');\n  if (imageInput.files.length === 0) {\n    alert('Please select an image file first.');\n    return;\n  }\n  const imageDisplay = document.getElementById('imageDisplay'); // Ensure you have an <img id=\"imageDisplay\"> in your HTML\n  const reader = new FileReader();\n  reader.onload = function (e) {\n    imageDisplay.src = e.target.result;\n  };\n  reader.readAsDataURL(imageInput.files[0]);\n  const formData = new FormData();\n  formData.append('file', imageInput.files[0]);\n  try {\n    const response = await fetch('http://localhost:8000/predict', {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const result = await response.json();\n    document.getElementById('predictionResult').textContent = `Prediction: ${result.prediction}`;\n  } catch (error) {\n    console.error('Error:', error);\n    document.getElementById('predictionResult').textContent = 'Failed to get prediction.';\n  }\n});","map":{"version":3,"names":["document","getElementById","addEventListener","imageInput","files","length","alert","imageDisplay","reader","FileReader","onload","e","src","target","result","readAsDataURL","formData","FormData","append","response","fetch","method","body","ok","Error","json","textContent","prediction","error","console"],"sources":["/home/jjescobedo/Documents/Coding/AIS/Final Project/AIS-project/src/App.js"],"sourcesContent":["document.getElementById('predictButton').addEventListener('click', async () => {\n  const imageInput = document.getElementById('imageInput');\n  if (imageInput.files.length === 0) {\n      alert('Please select an image file first.');\n      return;\n  }\n  \n  const imageDisplay = document.getElementById('imageDisplay'); // Ensure you have an <img id=\"imageDisplay\"> in your HTML\n  const reader = new FileReader();\n  reader.onload = function(e) {\n    imageDisplay.src = e.target.result;\n  };\n\n  reader.readAsDataURL(imageInput.files[0]);\n\n  const formData = new FormData();\n  formData.append('file', imageInput.files[0]);\n\n  try {\n      const response = await fetch('http://localhost:8000/predict', {\n          method: 'POST',\n          body: formData,\n      });\n\n      if (!response.ok) {\n          throw new Error('Network response was not ok');\n      }\n\n      const result = await response.json();\n      document.getElementById('predictionResult').textContent = `Prediction: ${result.prediction}`;\n  } catch (error) {\n      console.error('Error:', error);\n      document.getElementById('predictionResult').textContent = 'Failed to get prediction.';\n  }\n});"],"mappings":"AAAAA,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAY;EAC7E,MAAMC,UAAU,GAAGH,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;EACxD,IAAIE,UAAU,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC/BC,KAAK,CAAC,oCAAoC,CAAC;IAC3C;EACJ;EAEA,MAAMC,YAAY,GAAGP,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;EAC9D,MAAMO,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;EAC/BD,MAAM,CAACE,MAAM,GAAG,UAASC,CAAC,EAAE;IAC1BJ,YAAY,CAACK,GAAG,GAAGD,CAAC,CAACE,MAAM,CAACC,MAAM;EACpC,CAAC;EAEDN,MAAM,CAACO,aAAa,CAACZ,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAEzC,MAAMY,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEf,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAE5C,IAAI;IACA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACV,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IAEA,MAAMV,MAAM,GAAG,MAAMK,QAAQ,CAACM,IAAI,CAAC,CAAC;IACpCzB,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACyB,WAAW,GAAG,eAAeZ,MAAM,CAACa,UAAU,EAAE;EAChG,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B5B,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC,CAACyB,WAAW,GAAG,2BAA2B;EACzF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}